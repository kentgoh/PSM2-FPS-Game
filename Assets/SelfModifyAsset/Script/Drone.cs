using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class Drone : MonoBehaviour
{
    public GameObject Fire;
    public GameObject FireTargetEnd;
    public GameObject Explosion;
    public Slider DroneHealthBar;
    public TextMeshProUGUI CountDownText;
    private GameObject player;

    public int DroneHealth = 3;
    public float FireInterval = 5f;
    private float DroneYPos;
    private float nextTimetoFire = 0f;


    void Start()
    {
        DroneYPos = Random.Range(2, 5);
        player = GameObject.Find("Camera");
        
        FocusPlayer();
        StartCoroutine(DroneAttack());
    }

    void Update()
    {
        StartingDropDown(DroneYPos);
    }

    void StartingDropDown(float DroneYPos)
    {
        if (this.transform.position.y >= DroneYPos)
        {
            this.transform.position -= new Vector3(0, 0.1f, 0);
        }
    }

    void FocusPlayer()
    {
        if(player != null)
        {
            transform.LookAt(player.transform.position);
        }
    }

    IEnumerator DroneAttack()
    {
        StartCoroutine(CountDownTextDisplay());
        while (nextTimetoFire <= FireInterval + 1)
        {
            nextTimetoFire += 1;
            if (nextTimetoFire == FireInterval + 1)
            {
                //Shield Generated by Player, No damage deal
                if (player.GetComponent<ShieldManager>().shieldTrigger)
                {
                    FireTargetEnd.transform.position = player.transform.position;
                    Fire.SetActive(true);
                    AudioSource electric_zap = Fire.GetComponent<AudioSource>();
                    electric_zap.Play();

                    StartCoroutine("FireDeactivate");
                    nextTimetoFire = 0f;
                    player.GetComponent<ShieldManager>().blockCount++;
                }
                else
                {
                    FireTargetEnd.transform.position = player.transform.position;
                    Fire.SetActive(true);
                    AudioSource electric_zap = Fire.GetComponent<AudioSource>();
                    electric_zap.Play();

                    AimingManager cameraScript = player.GetComponent<AimingManager>();
                    StartCoroutine(cameraScript.CameraShake(0.15f, .4f));

                    HealthBarManager healthScript = GameObject.FindGameObjectWithTag("HealthBar").GetComponent<HealthBarManager>();
                    healthScript.decreaseHealthPoint();

                    StartCoroutine("FireDeactivate");
                    nextTimetoFire = 0f;
                }

            }

            yield return new WaitForSeconds(1f);
        }

    }

    public void DroneDamage()
    {
        if(DroneHealth == 3)
        {
            DroneHealthBar.gameObject.SetActive(true);
        }

        var explosion = Explosion.GetComponentsInChildren<ParticleSystem>();
        AudioSource sound = Explosion.GetComponent<AudioSource>();
        foreach (var p in explosion)
        {
            sound.Play();
            p.Play();
        }
        DroneHealth--;
        DroneHealthBar.value = DroneHealth;

        if(DroneHealth == 0)
        {
            DroneHealthBar.transform.parent.gameObject.SetActive(false);
        }

    }

    IEnumerator FireDeactivate()
    {
        yield return new WaitForSeconds(1f);
        Fire.SetActive(false);
    }

    IEnumerator CountDownTextDisplay()
    {
        while (true)
        {
            float timeDisplay = FireInterval - nextTimetoFire;
            if (timeDisplay == 0)
                CountDownText.SetText("");

            else
                CountDownText.SetText(timeDisplay.ToString());


            yield return new WaitForSeconds(1f);
        }

    }

}
